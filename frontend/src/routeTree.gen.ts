// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as BrowseImport } from './routes/_browse'
import { Route as AuthImport } from './routes/_auth'
import { Route as AuthSignupImport } from './routes/_auth/signup'
import { Route as AuthLoginImport } from './routes/_auth/login'

// Create Virtual Routes

const DashboardLazyImport = createFileRoute('/dashboard')()
const BrowseIndexLazyImport = createFileRoute('/_browse/')()
const BrowseAboutLazyImport = createFileRoute('/_browse/about')()
const DashboardProductsIndexLazyImport = createFileRoute(
  '/dashboard/products/',
)()
const DashboardProductsNewLazyImport = createFileRoute(
  '/dashboard/products/new',
)()

// Create/Update Routes

const DashboardLazyRoute = DashboardLazyImport.update({
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/dashboard.lazy').then((d) => d.Route))

const BrowseRoute = BrowseImport.update({
  id: '/_browse',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const BrowseIndexLazyRoute = BrowseIndexLazyImport.update({
  path: '/',
  getParentRoute: () => BrowseRoute,
} as any).lazy(() => import('./routes/_browse/index.lazy').then((d) => d.Route))

const BrowseAboutLazyRoute = BrowseAboutLazyImport.update({
  path: '/about',
  getParentRoute: () => BrowseRoute,
} as any).lazy(() => import('./routes/_browse/about.lazy').then((d) => d.Route))

const AuthSignupRoute = AuthSignupImport.update({
  path: '/signup',
  getParentRoute: () => AuthRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)

const DashboardProductsIndexLazyRoute = DashboardProductsIndexLazyImport.update(
  {
    path: '/products/',
    getParentRoute: () => DashboardLazyRoute,
  } as any,
).lazy(() =>
  import('./routes/dashboard/products/index.lazy').then((d) => d.Route),
)

const DashboardProductsNewLazyRoute = DashboardProductsNewLazyImport.update({
  path: '/products/new',
  getParentRoute: () => DashboardLazyRoute,
} as any).lazy(() =>
  import('./routes/dashboard/products/new.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_browse': {
      preLoaderRoute: typeof BrowseImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      preLoaderRoute: typeof DashboardLazyImport
      parentRoute: typeof rootRoute
    }
    '/_auth/login': {
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthImport
    }
    '/_auth/signup': {
      preLoaderRoute: typeof AuthSignupImport
      parentRoute: typeof AuthImport
    }
    '/_browse/about': {
      preLoaderRoute: typeof BrowseAboutLazyImport
      parentRoute: typeof BrowseImport
    }
    '/_browse/': {
      preLoaderRoute: typeof BrowseIndexLazyImport
      parentRoute: typeof BrowseImport
    }
    '/dashboard/products/new': {
      preLoaderRoute: typeof DashboardProductsNewLazyImport
      parentRoute: typeof DashboardLazyImport
    }
    '/dashboard/products/': {
      preLoaderRoute: typeof DashboardProductsIndexLazyImport
      parentRoute: typeof DashboardLazyImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  AuthRoute.addChildren([AuthLoginRoute, AuthSignupRoute]),
  BrowseRoute.addChildren([BrowseAboutLazyRoute, BrowseIndexLazyRoute]),
  DashboardLazyRoute.addChildren([
    DashboardProductsNewLazyRoute,
    DashboardProductsIndexLazyRoute,
  ]),
])
